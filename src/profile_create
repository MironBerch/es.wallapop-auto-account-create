from random import choice
import requests
import random
import string
import requests
import socks
import socket

def check_proxy(proxy_host, proxy_port):
    socks.set_default_proxy(socks.SOCKS5, proxy_host, int(proxy_port))
    socket.socket = socks.socksocket
    try:
        response = requests.get('http://www.example.com')
        if response.status_code == 200:
            return True
        else:
            return False
    except requests.exceptions.RequestException:
        return False


def create_ads_power_group(connection) -> str:
    create_group = requests.post(
        f'{connection}/api/v1/group/create',
        json={
            'group_name': ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(8)),
        },
    ).json()
    group_id = create_group['data']['group_id']
    return str(group_id)


def create_ads_power_profile(connection, host, port, group_id) -> str:
    create = requests.post(
        f'{connection}/api/v1/user/create', 
        json={
            'group_id': group_id,
            'user_proxy_config': {
                'proxy_soft': 'other',
                'proxy_type': 'socks5',
                'proxy_host': host,
                'proxy_port': port,
            },
            'country': 'it',
            'ip_country': 'it',
            'fingerprint_config': {
                'ua': 'Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.6045.163 Mobile Safari/537.36',
                'ua_system_version': ["Android"],
            },
        },
    ).json()
    return create['data']['id']


def create_config_dict() -> dict:
    config_dict = {}
    with open('config.txt', 'r') as file:
        lines = file.readlines()
        try:
            config_dict['user_id'] = lines[0].strip()
            #config_dict['api_key'] = lines[1].strip()
            config_dict['connection'] = lines[1].strip()
        except Exception:
            pass
    return config_dict


def create_credentials_dict() -> dict[str, str]:
    credentials_dict = {}
    with open('credentials.txt', 'r') as file:
        for line in file:
            email, password = line.strip().split(' ')
            credentials_dict[email] = password
    return credentials_dict


def create_proxy_list() -> list[str] | None:
    try:
        with open('proxy.txt', 'r') as f:
            proxie_choice = f.read().splitlines()
            return proxie_choice
    except Exception:
        return None


def get_random_unused_proxy(proxy_list: list) -> str:
    if proxy_list:
        random_proxy = choice(proxy_list)
        proxy_list.remove(random_proxy)
        return random_proxy
    else:
        return None


def filter_proxies(proxy_list):
    filtered_proxies = []
    for proxy in proxy_list:
        proxy_host, proxy_port = proxy.split(':')
        if check_proxy(proxy_host, proxy_port):
            filtered_proxies.append(proxy)
    return filtered_proxies


credentials_dict = create_credentials_dict()
proxy_list =create_proxy_list()
drivers = []
config_dict = create_config_dict()
profile_ids = []
group_id = create_ads_power_group(connection=config_dict['connection'])
profile_id_counter = 0

for i in range(len(credentials_dict)):
    proxy_host, proxy_port = get_random_unused_proxy(proxy_list=proxy_list).split(':')
    profile_id = create_ads_power_profile(
        connection=config_dict['connection'], 
        host=proxy_host,
        port=proxy_port,
        group_id=group_id,
    )
    profile_ids.append(profile_id)
print(len(credentials_dict), credentials_dict, profile_ids)
#for driver in drivers:
#    driver.close()
#    driver.quit()
